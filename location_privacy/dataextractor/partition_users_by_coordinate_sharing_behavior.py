'''
Created on Feb 9, 2014

@author: Himanshu Barthwal
'''
from mrjob.job import MRJob
from common_functions import CoordinatesSharing
from library.file_io import FileIO
from cjson import encode, decode

class MRExtractPartitionedUsersByCoordinateSharingBehavior(MRJob):
    '''
    Generates a distribution of users based and
    coordinates sharing behavior in a given dataset
    generated by dataextractor.TweetParser .
    '''
    def read_data(self, _, line):
        data = decode(line)
        return CoordinatesSharing.read_data(data)

    def aggregate_data(self, uid, data):
        return CoordinatesSharing.aggregate_data(uid, data)

    def calculate_user_distribution(self, uid, checkins):
        index = self.get_index(checkins)
        #  Here index tells that what percentage of coordinates are
        #  shared by the user with user id = 'uid'
        if index == 0:
            yield 'Non_Sharers', int(uid)
        elif index > 0 and index < 100:
            yield 'Selective_Sharers', int(uid)
        else:
            yield 'Full_Sharers', int(uid)

    def emit_partition(self, category, uids):
        yield category, list(uids)

    def get_index(self, checkins):
        return CoordinatesSharing.get_index(checkins)

    def output_writer(self, key, value, output_filename):
        print 'Writing data for ', key, ' to ', output_filename + '_' + key
        FileIO.writeToFile(encode({'uids':value}), output_filename + '_' + key)

    def steps(self):
        return [self.mr(mapper = self.read_data,
                    reducer = self.aggregate_data),
                    self.mr(mapper = self.calculate_user_distribution,
                            reducer = self.emit_partition),
                        ]
def main():
    MRExtractPartitionedUsersByCoordinateSharingBehavior().run()

if __name__ == '__main__':
    main()
