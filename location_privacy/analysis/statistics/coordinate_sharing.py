'''
Created on Dec 21, 2013

@author: Himanshu Barthwal
'''
from mrjob.job import MRJob
from common_functions import CoordinatesSharing, Utils
from settings import jobsettings
from cjson import decode

class MRUserCoordinatesSharingDistribution(MRJob):
    '''
    Generates a distribution of users based and
    coordinates sharing behavior in a given dataset
    generated by dataextractor.TweetParser .
    '''
    def __init__(self, args):
        super(MRUserCoordinatesSharingDistribution, self).__init__(args)

    def configure_options(self):
        super(MRUserCoordinatesSharingDistribution, self).configure_options()
        self.add_file_option('--filter_file', help = 'The file containing'
                             ' the uids, to be applied as filter on the data.')
        self.add_passthrough_option('--apply_filter', action = 'store_true',
                                    default = False, dest = 'apply_filter')

    def load_options(self, args):
        super(MRUserCoordinatesSharingDistribution, self).load_options(args)
        filter_filename = self.options.filter_file
        if self.options.apply_filter:
            self._uids = Utils.get_filter_uids(filter_filename)

    def read_data(self, _, line):
        data = decode(line)
        if self.options.apply_filter:
            if data['u'] in self._uids:
                return CoordinatesSharing.read_data(data)
        else:
            return CoordinatesSharing.read_data(data)

    def aggregate_data(self, uid, data):
        return CoordinatesSharing.aggregate_data(uid, data)

    def calculate_user_distribution(self, uid, checkins):
        index = self.get_index(checkins)
        yield index, 1

    def emit_distribution(self, index, count):
        yield index, sum(count)

    def get_index(self, checkins):
        return CoordinatesSharing.get_index(checkins)

    def steps(self):
        return [self.mr(mapper = self.read_data,
                                reducer = self.aggregate_data),
                    self.mr(mapper = self.calculate_user_distribution,
                                reducer = self.emit_distribution),
                        ]
def main():
    MRUserCoordinatesSharingDistribution.run()

if __name__ == '__main__':
    main()
