'''
Created on Jan 31, 2014

@author: Himanshu Barthwal
'''

from mrjob.job import MRJob
from cjson import decode
from common_functions import Utils

class MRTweetDistribution(MRJob):
    '''
    Counts the number of geotagged vs non geotagged tweets
    in a given dataset generated by dataextractor.TweetParser .
    '''
    def configure_options(self):
        super(MRTweetDistribution, self).configure_options()
        self.add_file_option('--filter_file', help = 'The file containing'
                             ' the uids, to be applied as filter on the data.')
        self.add_passthrough_option('--apply_filter', action = 'store_true',
                                    default = False, dest = 'apply_filter')
        self.add_passthrough_option('--delta',
                                    default = 1, type = 'int', dest = 'delta')

    def load_options(self, args):
        super(MRTweetDistribution, self).load_options(args)
        filter_filename = self.options.filter_file
        if self.options.apply_filter:
            self._uids = Utils.get_filter_uids(filter_filename)

    def yield_data(self, data):
        if data['c'] != 'N':
            yield 'Geotagged_Tweets', 1
        else:
            yield 'Non_Geotagged_Tweets', 1

    def read_data(self, _, line):
        data = decode(line)
        if self.options.apply_filter:
            if data['u'] in self._uids:
                return self.yield_data(data)
        else:
            return self.yield_data(data)

    def aggregate_data(self, tweet_type, count):
        yield tweet_type, sum(count)

    def steps(self):
        return [self.mr(mapper = self.read_data,
                        combiner = self.aggregate_data,
                         reducer = self.aggregate_data)]

def main():
    MRTweetDistribution.run()

if __name__ == '__main__':
    main()
